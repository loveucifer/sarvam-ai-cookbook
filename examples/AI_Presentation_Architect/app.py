import streamlit as st
import requests
import json
import io
import pandas as pd
from pptx import Presentation
from pptx.util import Inches

# --- App Configuration & Constants ---
st.set_page_config(page_title="AI Presentation Architect", layout="wide")
CHAT_API_URL = "https://api.sarvam.ai/v1/chat/completions"
TRANSLATE_API_URL = "https://api.sarvam.ai/translate"
SUPPORTED_LANGUAGES = {
    'en-IN': 'English',
    'hi-IN': 'Hindi',
    'ta-IN': 'Tamil',
    'te-IN': 'Telugu',
    'bn-IN': 'Bengali',
    'kn-IN': 'Kannada',
    'mr-IN': 'Marathi',
    'gu-IN': 'Gujarati'
}

# --- Backend AI Functions ---

def generate_english_presentation(topic: str, api_key: str, slide_count: int) -> list:
    """Generates presentation content (titles and bullet points) in English using the Chat API."""
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    prompt = f"""
    You are an expert content creator. Generate a {slide_count}-slide presentation for the topic: '{topic}'.
    Return a single JSON array of objects. Each object must have "title" and "content" (a string with 3-4 bullet points, separated by newlines).
    """
    payload = {"model": "sarvam-m", "messages": [{"role": "user", "content": prompt}]}
    response = requests.post(CHAT_API_URL, headers=headers, json=payload)
    response.raise_for_status()
    response_text = response.json()["choices"][0]["message"]["content"]
    if response_text.startswith("```json"):
        response_text = response_text[7:-3].strip()
    return json.loads(response_text)

def translate_content(text: str, target_lang: str, api_key: str) -> str:
    """Translates text to the target language using the Translate API."""
    if not text.strip() or target_lang == 'en-IN':
        return text
    headers = {"api-subscription-key": api_key, "Content-Type": "application/json"}
    payload = {"input": text, "source_language_code": "en-IN", "target_language_code": target_lang}
    response = requests.post(TRANSLATE_API_URL, headers=headers, json=payload)
    response.raise_for_status()
    return response.json()["translated_text"]

def create_powerpoint_presentation(slides: list, topic: str, target_lang_name: str) -> io.BytesIO:
    """Creates a PowerPoint presentation from the slide content."""
    prs = Presentation()
    
    # Title Slide
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = topic
    slide.placeholders[1].text = f"Generated by Sarvam AI in {target_lang_name}"
    
    # Content Slides
    for slide_data in slides:
        content_slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(content_slide_layout)
        slide.shapes.title.text = slide_data['title']
        slide.shapes.placeholders[1].text = slide_data['content']

    # Save presentation to a byte stream to be downloaded
    ppt_stream = io.BytesIO()
    prs.save(ppt_stream)
    ppt_stream.seek(0)
    return ppt_stream

# --- Streamlit Web App UI and Logic ---

st.title("ðŸ¤– Multilingual AI Presentation Architect")

if 'stage' not in st.session_state:
    st.session_state.stage = 'enter_details'

if st.session_state.stage == 'enter_details':
    st.header("Step 1: Provide Presentation Details")
    api_key = st.text_input("Enter your Sarvam AI API Key", type="password")
    topic = st.text_input("What is the topic of your presentation?")
    language = st.selectbox("Choose a language for the presentation", options=list(SUPPORTED_LANGUAGES.keys()), format_func=lambda x: SUPPORTED_LANGUAGES[x])
    slide_count = st.slider("How many slides?", 2, 10, 5)

    if st.button("Build My Presentation"):
        if not api_key or not topic:
            st.warning("Please provide both an API Key and a topic.")
        else:
            with st.spinner("The AI is architecting your presentation... This may take a moment."):
                try:
                    # AI Processing
                    st.info("Generating English content...")
                    english_slides = generate_english_presentation(topic, api_key, slide_count)
                    
                    st.info(f"Translating content to {SUPPORTED_LANGUAGES[language]}...")
                    translated_topic = translate_content(topic, language, api_key)
                    translated_slides = [
                        {
                            'title': translate_content(s['title'], language, api_key),
                            'content': translate_content(s['content'], language, api_key)
                        } for s in english_slides
                    ]
                    
                    st.info("Building PowerPoint file...")
                    ppt_file_stream = create_powerpoint_presentation(translated_slides, translated_topic, SUPPORTED_LANGUAGES[language])
                    
                    st.session_state.ppt_file = ppt_file_stream
                    st.session_state.file_name = f"{topic.replace(' ', '_')}_{language}.pptx"
                    st.session_state.stage = 'download'
                    st.rerun()

                except Exception as e:
                    st.error(f"An error occurred: {e}")

if st.session_state.stage == 'download':
    st.header("Step 2: Download Your Presentation")
    st.balloons()
    st.success("Your presentation has been generated successfully!")
    
    st.download_button(
        label="Download Presentation (.pptx)",
        data=st.session_state.ppt_file,
        file_name=st.session_state.file_name,
        mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
    )
    
    if st.button("Start Over"):
        st.session_state.stage = 'enter_details'
        st.rerun()